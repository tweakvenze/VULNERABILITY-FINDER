#ifndef INCLUDE_UTILS_H_
#define INCLUDE_UTILS_H_

#include <iostream>
#include <stdexcept>
#include <stdio.h>
#include <string>
#include <vector>

#define FILE_EXTENSION ".pro"

#ifdef _WIN32
	#define NMAP_LOCATION "C:/Program Files/nmap.exe "
	#define GOBUSTER_LOCATION "C:/Program Files/gobuster.exe "
	#define WHOIS_LOCATION "C:/Program Files/whois.exe"
	#define NEW_LINE "\r\n"
	#define CLEAR_SCREEN "cls"
	#define Save_LOCATION "~/saman/" ;

#elif _WIN64
	#define NMAP_LOCATION "C:/Program Files/nmap.exe "
	#define GOBUSTER_LOCATION "C:/Program Files/gobuster.exe "
	#define WHOIS_LOCATION "C:/Program Files/whois.exe"
	#define NEW_LINE "\r\n"
	#define CLEAR_SCREEN "cls"
	#define Save_LOCATION "~/saman/" ;

#elif __linux__
	#define NMAP_LOCATION "/bin/nmap "
	#define GOBUSTER_LOCATION "/bin/gobuster "
	#define WHOIS_LOCATION "/bin/whois "
	#define SUBFINDER_LOCATION "/bin/subfinder "
	#define NEW_LINE "\n"
	#define CLEAR_SCREEN "clear"
 	#define Save_LOCATION "/home/alan/saman/"
	#define Reverser_Shell "/home/alan/saman/FishShells/reverseshell."

#endif

static std::vector<std::string> COLOR_VECTOR = {
		/* Sequence is taken from https://en.wikipedia.org/wiki/ANSI_escape_code */
		{"\033[0m"},             /* Default color sequence0*/
		{"\033[91m"},			 //Bright Red1
		{"\033[94m"},			//Bright Blue2
		{"\033[92m"},			//Bright Green3
		{"\033[95m"},			//Bright Magenta4
		{"\033[96m"},			//Bright Cyan5
		{"\033[93m"},			//Bright Yellow6
		{"\033[90m"},			//Bright Black7
		{"\033[37m"},			 //White8
		{"\033[30m"},			 //Black9
};

std::string subprocess(const char*);
void print(const std::string &);
void print(const std::string &, int);
void print_vector(std::vector<std::string> &,int);
void print_without_new_line(const std::string &, int);

bool commond_exist_check(const std::string &results);

void split_string(const std::string&, std::vector<std::string>&,
              const std::string& delims);

void parse_html_code(std::string &,std::string &,std::string&,int &);
void parse_html_code(std::string &,std::string &,int &);

void get_hostname(std::string &);
bool response_filter(std::string &, std::string &);

inline void string_tolower(std::string &data){
	for(auto& c : data)
		   c = tolower(c);
}
#endif /* INCLUDE_UTILS_H_ */
