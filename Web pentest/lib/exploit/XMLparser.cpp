#include "../../include/exploit/XMLparser.h"

void check_for_form_type(std::string form_data, int &page_method, std::string &form_action){
	std::string temp_form_data,form_tag = "<form", method_string = "method=",action_string = "action=", delimeter = "\"";

	size_t begin = form_data.find(form_tag);
	if (begin == std::string::npos) return;
	temp_form_data = form_data;
	begin = form_data.find(method_string);
	form_data.replace(0, begin + 8, "");
	begin = form_data.find(delimeter);
	form_data.replace(begin , form_data.size(), "");
	string_tolower(form_data);
	if(form_data == "post") page_method = 1;

	begin = temp_form_data.find(action_string);
	temp_form_data.replace(0, begin + 8, "");
	begin = temp_form_data.find(delimeter);
	temp_form_data.replace(begin , temp_form_data.size(), "");
	if(temp_form_data[0] != '/'){
		temp_form_data = "/" + temp_form_data;
	}
	form_action = temp_form_data;
	return;
}

void check_submit_type(std::string response,std::string input_type_string, std::string input_type_deli,
						std::string &submit_value,bool &has_file_type){
	std::string temp_string = response;
	size_t end, begin = response.find(input_type_string);
	if (begin == std::string::npos) return;
	response.replace(0, begin, "");

	begin = response.find(input_type_deli) + 1;
	response.replace(0, begin,"");
	end = response.find(input_type_deli);
	response.replace(end,  response.size(),"");
	if(response == "file"){
		has_file_type = true;
		return;
	}
	if(response == "submit"){
		std::string input_value_string = "value=";
		begin = temp_string.find(input_value_string);
		if (begin == std::string::npos) return;
		temp_string.replace(0, begin, "");
		begin = temp_string.find(input_type_deli) + 1;
		temp_string.replace(0, begin,"");
		end = temp_string.find(input_type_deli);
		temp_string.replace(end,  temp_string.size(),"");
		submit_value = temp_string;
	}
}

void search_for_input_field(std::string &response,std::vector<std::string> &return_vector, bool &has_input_field,
		int &form_type, std::string &form_action, bool &has_file_type){
	return_vector.clear();
	check_for_form_type(response, form_type, form_action);
	std::string  input_field_string = "<input", input_name_string = "name=", input_type_deli = "\"",
				input_type_string = "type=", submit_value = "";
	has_input_field = response_filter(response, input_field_string);
	if(!has_input_field) return;
	int begin = response.find(input_field_string);
	response.replace(0,begin, "");
	std::vector<std::string> response_vector, submit_values;
	split_string(response, response_vector, "\n");
	for (size_t i = 0; i < response_vector.size(); i ++){
		if(response_filter(response_vector[i], input_field_string)){
			try{
				response = response_vector[i];
				check_submit_type(response,input_type_string,input_type_deli, submit_value, has_file_type);
				size_t end, begin = response.find(input_name_string);
				response.replace(0, begin, "");
				begin = response.find(input_type_deli) + 1;
				response.replace(0, begin,"");
				end = response.find(input_type_deli);
				response.replace(end, (int) response.size(),"");

				if(submit_value != "") {
					submit_values.push_back(response);
					submit_values.push_back(submit_value);
					submit_value = "";
				}
				else  return_vector.push_back(response);
			}
			catch(...){
				 continue;
			}
		}
	}
	for(size_t i = 0;i < submit_values.size();i++){
		return_vector.push_back(submit_values.at(i));
	}
	return;
}

void search_for_input_field(std::string &response,std::vector<std::string> &return_vector, bool &has_input_field,
		int &form_type, std::string &form_action){
	bool has_file_type = false;
	search_for_input_field(response,return_vector, has_input_field, form_type, form_action, has_file_type);
}

void get_authorising_token(std::string &response){
	//print (response);
}
