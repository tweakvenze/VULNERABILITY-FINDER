#include "../../include/console/command_search.h"

void information_auto(std::string &hostname,short int depth){
	std::vector<std::string> hostname_list;
	split_string(hostname, hostname_list,",");
	std::string result;

	std::string command;
	std::cout<< NEW_LINE;


	for(size_t i = 0;i < hostname_list.size(); i++){
		hostname = hostname_list[i];
		std::string filename = Save_LOCATION;
		filename += hostname + FILE_EXTENSION;
		std::ofstream fin(filename);

		print ("WHOIS running....");
		command = WHOIS_LOCATION + (std::string)" " + hostname;
		result = subprocess(command.c_str());
		Whois_Filter(result);
		print (result);
		fin << result;
		result.erase();

		print ("SubFinder running...");
		command = SUBFINDER_LOCATION + subfinder_dns + hostname;
		result = subprocess(command.c_str());
		SubFinder_Filter(result);
		print (result);
		fin << result;
		result.erase();

		print ("Nmap running...");
		command = NMAP_LOCATION + nmap_query[depth] + hostname;
		result = subprocess(command.c_str());
		Nmap_Filters(result);
		print (result);
		fin << result;
		result.erase();

		print ("Gobuster running...");
		command = GOBUSTER_LOCATION +  gobuster_w[depth] + gobuster_thread[depth] + hostname + " -x php, html, txt, --wildcard";
		result = subprocess(command.c_str());
		GoBuster_Filter(result);
		print(result);
		fin << result;
		result.erase();
		fin.close();
	}
}


void web_exploit(std::string &hostname, int PORT_NUMBER){
	int web_exploit_choice = 0;
	std::cout << "[1] Password Auth Bypass for website"<< NEW_LINE
			  << "[2] Directory Traversal check"<< NEW_LINE
			  << "[3] Buffer Overflow check"<< NEW_LINE
			  << "[4] DOS Attack"<< NEW_LINE
			  << "[0] Back Page"<< NEW_LINE
			  << "[*] saman!>";
	std::cin >> web_exploit_choice;
	switch(web_exploit_choice){
	case 1:
		login_bypass(hostname,  80, 2);
		break;
	case 2:
		dir_check(hostname,80,1);
		break;
	case 3:
		Buffer_overflow_init(hostname, 80, 5);
		break;
	case 4:
		print("service under development !!", 5);
		break;
	default:
		print("invalid service");
		break;
	}
	return;
}
void dos_attack(std::string &hostname, int PORT){
	dos_attack(hostname, 8080, "192.168.13.1");  //This is the source address
}



