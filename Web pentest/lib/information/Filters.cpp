#include "../../include/information/Filters.h"

void SubFinder_Filter(std::string &results){
	if(commond_exist_check(results)){
			std::string message =  ("SubFinder doesn't exist install program and then run tool again or\n"
					"you can give a location if you have not installed SubFinder in default\n"
					"location");
			print (message);
		}
		else {
			results = ">>>> SubFinder Results "+ (std::string)NEW_LINE + results + "<<<<" + (std::string)NEW_LINE;
		}
}

void Whois_Filter(std::string &results){
	if(commond_exist_check(results)){
		std::string message =  ("Whois doesn't exist install program and then run tool again or\n"
				"you can give a location if you have not installed SubFinder in default\n"
				"location");
		print (message,1);
	}
	else {
		int begin = results.find(">>>");
		int end = (int)results.size();
		try{
			results.replace(begin, end , "");
		}catch(...){
			print("Exception in whois results",1);
		}
		results = ">>>> Whois Results " + (std::string)NEW_LINE +results + "<<<<"+ (std::string)NEW_LINE;
	}
}

void GoBuster_Filter(std::string &results){
	if(commond_exist_check(results)){
		std::string message = "Gobuster doesn't exist install program and then run tool again or\n"
				"you can give a location if you have not installed SubFinder in default\n"
				"location";
		print(message);
	}
	else {
		results = ">>>> GoBuster Results " + (std::string)NEW_LINE + results + "<<<<"+ (std::string)NEW_LINE;
		return;
	}
}

void Nmap_Filters(std::string &nmap_results){
	if(commond_exist_check(nmap_results)){
		std::string message = "Nmap doesn't exist check for nmap in default directory or \n"
				"provide value if you have installed Nmap in different location";
		print (message);
	}
	else{
		int begin = nmap_results.find("\n\n");
		int end = (int)nmap_results.size();
		try{
			nmap_results.replace(begin, end , "");
			end = nmap_results.find("ports");
			nmap_results.replace(0, end + 6, "");
		}catch(...){
			print("Exception in nmap results",1);
		}
		nmap_results = ">>>> Nmap Results " + (std::string)NEW_LINE + nmap_results + (std::string)NEW_LINE + "<<<<"+ (std::string)NEW_LINE;
		return;
	}
}



