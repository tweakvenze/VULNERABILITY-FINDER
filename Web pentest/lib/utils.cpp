#include "../include/utils.h"

std::string getOsName()
{
    #ifdef _WIN32
    return "Windows 32-bit";
    #elif _WIN64
    return "Windows 64-bit";
    #elif __APPLE__ || __MACH__
    return "Mac OSX";
    #elif __linux__
    return "Linux";
    #elif __FreeBSD__
    return "FreeBSD";
    #elif __unix || __unix__
    return "Unix";
    #else
    return "Other";
    #endif
}

FILE* getPipe(const char* cmd)
{
    #ifdef _WIN32
    return _popen(cmd, "r");
    #elif _WIN64
    return "Windows 64-bit";
    #elif __APPLE__ || __MACH__
    return "Mac OSX";
    #elif __linux__
    return popen(cmd, "r");
    #elif __FreeBSD__
    return "FreeBSD";
    #elif __unix || __unix__
    return "Unix";
    #else
    return "Other";
    #endif
}
int closePipe(FILE* pipe)
{
    #ifdef _WIN32
    return _pclose(pipe);
    #elif _WIN64
    return "Windows 64-bit";
    #elif __APPLE__ || __MACH__
    return "Mac OSX";
    #elif __linux__
    return pclose(pipe);
    #elif __FreeBSD__
    return "FreeBSD";
    #elif __unix || __unix__
    return "Unix";
    #else
    return "Other";
    #endif
}

std::string subprocess(const char* cmd) {
    char buffer[128];
    std::string result = "";

    FILE* pipe = getPipe(cmd);
    if (!pipe) throw std::runtime_error("popen() failed!");
    try {
        while (fgets(buffer, sizeof buffer, pipe) != NULL) {
            result += buffer;
        }
    } catch (...) {
    	closePipe(pipe);
        throw;
    }
    closePipe(pipe);
    return result;
}

void print(const std::string &s, int color_code)
{
	if (color_code > 9 || color_code < 0) color_code = 0;
    std::cout << COLOR_VECTOR[color_code];
	for (auto it = s.cbegin() ; it != s.cend(); ++it) {
        std::cout << *it;
    }
    std::cout << COLOR_VECTOR[0];
    std::cout<< NEW_LINE;
}
void print_without_new_line(const std::string &s, int color_code)
{
	if (color_code > 9 || color_code < 0) color_code = 0;
    std::cout << COLOR_VECTOR[color_code];
	for (auto it = s.cbegin() ; it != s.cend(); ++it) {
        std::cout << *it;
    }
    std::cout << COLOR_VECTOR[0];
}

void print(const std::string &s)
{
    for (auto it = s.cbegin() ; it != s.cend(); ++it) {
        std::cout << *it ;
    }
    std::cout<<NEW_LINE;
}

void print_vector(std::vector<std::string> &s,int color_code)
{
	if (color_code > 9 || color_code < 0) color_code = 0;
	std::cout << COLOR_VECTOR[color_code];
	for (auto it = s.cbegin() ; it != s.cend(); ++it) {
    	std::cout <<*it << NEW_LINE;
    }
    std::cout<<COLOR_VECTOR[0];
    std::cout<<NEW_LINE;
}
bool commond_exist_check(const std::string &results){
	std::string substring = "not found";
	if(results.find(substring) != std::string::npos){
		return true;
	}
	else{
		return false;
	}

}
void split_string(const std::string& str, std::vector<std::string>& cont,
              const std::string& delims)
{
    std::size_t current, previous = 0;
    current = str.find_first_of(delims);
    while (current != std::string::npos) {
        cont.push_back(str.substr(previous, current - previous));
        previous = current + 1;
        current = str.find_first_of(delims, previous);
    }
    cont.push_back(str.substr(previous, current - previous));
}

void parse_html_code(std::string &response,std::string &headers,std::string &authorised,int &code){
	headers.clear(); authorised.clear(); code = 0;
	int begin = response.find("\r\n\r\n");
	try{
		headers = response.substr(0,begin);
		response.replace(begin,(int)response.size(),"");
		code = std::stoi(headers.substr(9,3));
		authorised = response.substr(response.find(authorised) - 3,3);
	} catch(std::exception const &exc){
		std::cerr << "Exception Caught" << exc.what() << "\n";
		authorised = "";
	} catch (...)
    {
        std::cerr << "Unknown exception caught\n";
        authorised = "";
    }
	return;
}
void parse_html_code(std::string &response,std::string &headers,int &code){
	int begin = response.find("\r\n\r\n");
	headers.clear();
	code = 0;
	try{
		headers = response.substr(0,begin);
		response.replace(0,begin,"");
		code = std::stoi(headers.substr(9,3));
	} catch(std::exception const &exc){
	//	std::cerr << "Exception Caught in parse_html_code " << exc.what() << "\n";
	} catch (...)
    {
        std::cerr << "Unknown exception caught in parse_html_code\n";
    }
	return;
}

void get_hostname(std::string &hostname){
	unsigned char a,b,c,d;
	if (sscanf(hostname.c_str(),"%hhd.%hhd.%hhd.%hhd", &a, &b, &c, &d) == 4){
		return;
	}
	else{
		hostname = "www." + hostname;
	}
}

bool response_filter(std::string &response, std::string &matching_string){
	bool return_value;
	response.find(matching_string) != std::string::npos ?
			return_value =  true:
			return_value =  false;
	return return_value;
}
